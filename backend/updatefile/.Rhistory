if (!is.na(pepmaperdata[i,(6+countdb)])){
if (datatopull==1){
uid<-substr(as.character(pepmaperdata[i,datatopull]), 1, 4)
d<-c(d,uid)
} else {
d<-c(d,as.character(pepmaperdata[i,datatopull]))
}
}
}
result<-c(result,list(d=d))
}
vp <- venn.diagram(result, fill = 2:5, alpha = 0.3, filename = NULL)
png(diagramname,width = 1000, height = 600, units = "px")
grid.draw(vp)
dev.off()
}
}
library(VennDiagram)
plotVennDiagram <- function(filename){
vendiagramtype<-c("ProteinVen","PeptideVen")
for (v in vendiagramtype){
diagramname<-paste(v, "png", sep=".")
datatopull=0
result<-list()
if (as.character(v)=="ProteinVen"){
datatopull=1
} else{
datatopull=5
}
databasename<-c("Passel","Cptac","Peptidetracker","Panorama")
countdb=0
pepmaperdata<-read.csv(filename,check.names=F,header = T,sep="\t")
for(d in databasename){
countdb=countdb+1
d<-c()
for(i in 1:nrow(pepmaperdata)){
print ((6+countdb))
print (pepmaperdata[i,])
if (!is.na(pepmaperdata[i,(6+countdb)])){
if (datatopull==1){
uid<-substr(as.character(pepmaperdata[i,datatopull]), 1, 4)
d<-c(d,uid)
} else {
d<-c(d,as.character(pepmaperdata[i,datatopull]))
}
}
}
result<-c(result,list(d=d))
}
vp <- venn.diagram(result, fill = 2:5, alpha = 0.3, filename = NULL)
png(diagramname,width = 1000, height = 600, units = "px")
grid.draw(vp)
dev.off()
}
}
plotVennDiagram("/home/pallab/Desktop/djangoproject/peptidemapper/src/mappermotherfile/ReportBook_mother_file.csv")
library(VennDiagram)
plotVennDiagram <- function(filename){
pepmaperdata<-read.csv(filename,check.names=F,header = T,sep="\t")
vendiagramtype<-c("ProteinVen","PeptideVen")
for (v in vendiagramtype){
diagramname<-paste(v, "png", sep=".")
datatopull=0
result<-list()
if (as.character(v)=="ProteinVen"){
datatopull=1
} else{
datatopull=5
}
databasename<-c("Passel","Cptac","Peptidetracker","Panorama")
countdb=0
for(d in databasename){
countdb=countdb+1
d<-c()
for(i in 1:nrow(pepmaperdata)){
print ((6+countdb))
print (pepmaperdata[i,])
if (!is.na(pepmaperdata[i,(6+countdb)])){
if (datatopull==1){
uid<-substr(as.character(pepmaperdata[i,datatopull]), 1, 4)
d<-c(d,uid)
} else {
d<-c(d,as.character(pepmaperdata[i,datatopull]))
}
}
}
result<-c(result,list(d=d))
}
countdb=0
vp <- venn.diagram(result, fill = 2:5, alpha = 0.3, filename = NULL)
png(diagramname,width = 1000, height = 600, units = "px")
grid.draw(vp)
dev.off()
}
}
plotVennDiagram("/home/pallab/Desktop/djangoproject/peptidemapper/src/mappermotherfile/ReportBook_mother_file.csv")
library(VennDiagram)
plotVennDiagram <- function(filename){
pepmaperdata<-read.csv(filename,check.names=F,header = T,sep="\t")
vendiagramtype<-c("ProteinVen","PeptideVen")
for (v in vendiagramtype){
diagramname<-paste(v, "png", sep=".")
datatopull=0
result<-list()
if (as.character(v)=="ProteinVen"){
datatopull=1
} else{
datatopull=5
}
databasename<-c("Passel","Cptac","Peptidetracker","Panorama")
countdb=0
for(d in databasename){
countdb=countdb+1
print ((6+countdb))
print (d)
d<-c()
for(i in 1:nrow(pepmaperdata)){
if (!is.na(pepmaperdata[i,(6+countdb)])){
if (datatopull==1){
uid<-substr(as.character(pepmaperdata[i,datatopull]), 1, 4)
d<-c(d,uid)
} else {
d<-c(d,as.character(pepmaperdata[i,datatopull]))
}
}
}
result<-c(result,list(d=d))
}
print (countdb)
print (v)
countdb=0
vp <- venn.diagram(result, fill = 2:5, alpha = 0.3, filename = NULL)
png(diagramname,width = 1000, height = 600, units = "px")
grid.draw(vp)
dev.off()
}
}
plotVennDiagram("/home/pallab/Desktop/djangoproject/peptidemapper/src/mappermotherfile/ReportBook_mother_file.csv")
countdb=0
countdb=countdb+1
countdb
countdb=countdb+1
countdb
countdb=0
countdb
for (i in c(1:4)){countdb=countdb+1 print (countdb)}
for (i in c(1:4)){countdb=countdb+1 print(countdb)}
for (i in c(1:4)){countdb=countdb+1}
countdb
databasename<-c("Passel","Cptac","Peptidetracker","Panorama")
for (i in length(databasename)){print(i)}
typeof(databasename)
for (i in 1:length(databasename)){print(i)}
for (i in 1:length(databasename)){print(databasename[i])}
library(VennDiagram)
plotVennDiagram <- function(filename){
pepmaperdata<-read.csv(filename,check.names=F,header = T,sep="\t")
vendiagramtype<-c("ProteinVen","PeptideVen")
for (v in vendiagramtype){
diagramname<-paste(v, "png", sep=".")
datatopull=0
result<-list()
if (as.character(v)=="ProteinVen"){
datatopull=1
} else{
datatopull=5
}
databasename<-c("Passel","Cptac","Peptidetracker","Panorama")
for(d in 1:length(databasename)){
print ((6+d))
print (databasename[d])
databasename[d]<-c()
for(i in 1:nrow(pepmaperdata)){
if (!is.na(pepmaperdata[i,(5+d)])){
if (datatopull==1){
uid<-substr(as.character(pepmaperdata[i,datatopull]), 1, 4)
databasename[d]<-c(databasename[d],uid)
} else {
databasename[d]<-c(databasename[d],as.character(pepmaperdata[i,datatopull]))
}
}
}
result<-c(result,list(databasename[d]=databasename[d]))
}
print (v)
vp <- venn.diagram(result, fill = 2:5, alpha = 0.3, filename = NULL)
png(diagramname,width = 1000, height = 600, units = "px")
grid.draw(vp)
dev.off()
}
}
library(VennDiagram)
plotVennDiagram <- function(filename){
pepmaperdata<-read.csv(filename,check.names=F,header = T,sep="\t")
vendiagramtype<-c("ProteinVen","PeptideVen")
for (v in vendiagramtype){
diagramname<-paste(v, "png", sep=".")
datatopull=0
result<-list()
if (as.character(v)=="ProteinVen"){
datatopull=1
} else{
datatopull=5
}
databasename<-c("Passel","Cptac","Peptidetracker","Panorama")
for(d in 1:length(databasename)){
dbname<-databasename[d]
print (5+d)
print (dbname)
dbname<-c()
for(i in 1:nrow(pepmaperdata)){
if (!is.na(pepmaperdata[i,(5+d)])){
if (datatopull==1){
uid<-substr(as.character(pepmaperdata[i,datatopull]), 1, 4)
dbname<-c(dbname,uid)
} else {
dbname<-c(dbname,as.character(pepmaperdata[i,datatopull]))
}
}
}
result<-c(result,list(dbname=dbname))
}
print (v)
vp <- venn.diagram(result, fill = 2:5, alpha = 0.3, filename = NULL)
png(diagramname,width = 1000, height = 600, units = "px")
grid.draw(vp)
dev.off()
}
}
plotVennDiagram("/home/pallab/Desktop/djangoproject/peptidemapper/src/mappermotherfile/ReportBook_mother_file.csv")
x="hello"
y=x
y
y<c(1,2,3,4)
y
y<-c(1,2,3,4)
y
x="hello"
x
y
result<-list()
result<-list(x=y)
result
x
x[0]
x[1]
result<-list()
result<-list(x[1]=y)
result<-list(paste(x)=y)
result<-list(paste(x[1])=y)
names(x)
paste(x)
result<-list((paste(x))=y)
result<-list()
x
y
result<-list(x=y)
result
result<-append(x,y)
result
result<-list(x=y,p=y)
result
result[x]
result[[x]
]
result[1]
x<-c("hello")
x[1]
result<-list(x[1]=y)
result<-list((x[1])=y)
result<-list(
)
x
y
result[x[1]]<-y
result
result<-list()
x
x<-"hello"
x
result[x]<-y
y
result
result<-list()
result<-list(y)
result
names(result)<-c("hello")
result
library(VennDiagram)
plotVennDiagram <- function(filename){
pepmaperdata<-read.csv(filename,check.names=F,header = T,sep="\t")
vendiagramtype<-c("ProteinVen","PeptideVen")
for (v in vendiagramtype){
diagramname<-paste(v, "png", sep=".")
datatopull=0
result<-list()
if (as.character(v)=="ProteinVen"){
datatopull=1
} else{
datatopull=5
}
databasename<-c("Passel","Cptac","Peptidetracker","Panorama")
for(d in 1:length(databasename)){
dbname<-databasename[d]
dbname<-c()
for(i in 1:nrow(pepmaperdata)){
if (!is.na(pepmaperdata[i,(5+d)])){
if (datatopull==1){
uid<-substr(as.character(pepmaperdata[i,datatopull]), 1, 4)
dbname<-c(dbname,uid)
} else {
dbname<-c(dbname,as.character(pepmaperdata[i,datatopull]))
}
}
}
result<-c(result,list(dbname))
}
names(result)<-c("Passel","Cptac","Peptidetracker","Panorama")
vp <- venn.diagram(result, fill = 2:5, alpha = 0.3, filename = NULL)
png(diagramname,width = 1000, height = 600, units = "px")
grid.draw(vp)
dev.off()
}
}
plotVennDiagram("/home/pallab/Desktop/djangoproject/peptidemapper/src/mappermotherfile/ReportBook_mother_file.csv")
png(file = "myplot.png", bg = "black")
plot(1:10)
rect(1, 5, 3, 7, col = "white")
dev.off()
png(file = "myplot.png", bg = rgb(229,229,229))
plot(1:10)
rect(1, 5, 3, 7, col = "white")
dev.off()
col2rgb(rgb(229,229,229))
col2rgb("yellow")
colorConverter(rgb(229,229,229))
png(file = "myplot.png", bg = "Mercury")
plot(1:10)
rect(1, 5, 3, 7, col = "white")
dev.off()
png(file = "myplot.png", bg = "#e5e5e5")
plot(1:10)
rect(1, 5, 3, 7, col = "white")
dev.off()
library(VennDiagram)
plotVennDiagram <- function(inputfilename){
pepmaperdata<-read.csv(inputfilename,check.names=F,header = T,sep="\t")
vendiagramtype<-c("ProteinVen")
for (v in vendiagramtype){
diagramname<-paste(v, "png", sep=".")
result<-list()
databasenames<-c("Passel","Cptac","Peptidetracker","Panorama")
for(d in 1:length(databasenames)){
dbname<-databasenames[d]
dbname<-c()
for(i in 1:nrow(pepmaperdata)){
if (!is.na(pepmaperdata[i,(5+d)])){
if (as.character(v)=="ProteinVen"){
uid<-substr(as.character(pepmaperdata[i,1]), 1, 4)
dbname<-c(dbname,uid)
}
}
}
result<-c(result,list(dbname))
}
names(result)<-c("Passel","Cptac","Peptidetracker","Panorama")
print (result)
vp <- venn.diagram(result, fill = 2:5, alpha = 0.3, filename = NULL)
png(diagramname,res = 175, bg = "#EEEEEE",units = "px")
grid.draw(vp)
dev.off()
}
}
plotVennDiagram("/home/pallab/Desktop/djangoproject/peptidemapper/src/mappermotherfile/ReportBook_mother_file.csv")
pepmaperdata<-read.csv(inputfilename,check.names=F,header = T,sep="\t")
pepmaperdata<-read.csv("ReportBook_mother_file.csv",check.names=F,header = T,sep="\t")
print (pepmaperdata[i,(5+d)])
print (pepmaperdata[i,])
print (dbname)
print (databasenames[d])
print (databasenames)
databasenames<-c("Unique in protein (yes)","Unique in protein (no)","Present in isoforms (yes)","Present in isoforms (no)")
databasenames
source('~/Desktop/djangoproject/peptidemapper/updatefile/devtest.R')
print (databasenames)
for(d in 1:length(databasenames)){
dbname<-databasenames[d]
print (databasenames[d])
dbname<-c()
for(i in 1:nrow(pepmaperdata)){
print (pepmaperdata[i,])
if (!is.na(pepmaperdata[i,(5+d)])){
if (as.character(v)=="ProteinVen"){
uid<-substr(as.character(pepmaperdata[i,1]), 1, 6)
dbname<-c(dbname,uid)
} else {
dbname<-c(dbname,as.character(pepmaperdata[i,5]))
}
}
}
result<-c(result,list(dbname))
}
clean
for(d in 1:length(databasenames)){
dbname<-databasenames[d]
print (databasenames[d])
dbname<-c()
for(i in 1:nrow(pepmaperdata)){
print (pepmaperdata[i,])
if (!is.na(pepmaperdata[i,(5+d)])){
if (as.character(v)=="ProteinVen"){
uid<-substr(as.character(pepmaperdata[i,1]), 1, 6)
dbname<-c(dbname,uid)
} else {
dbname<-c(dbname,as.character(pepmaperdata[i,5]))
}
}
}
result<-c(result,list(dbname))
}
for(d in 1:length(databasenames)){
dbname<-databasenames[d]
print (databasenames[d])
dbname<-c()
for(i in 1:nrow(pepmaperdata)){
if (!is.na(pepmaperdata[i,(5+d)])){
if (as.character(v)=="ProteinVen"){
uid<-substr(as.character(pepmaperdata[i,1]), 1, 6)
dbname<-c(dbname,uid)
} else {
dbname<-c(dbname,as.character(pepmaperdata[i,5]))
}
}
}
result<-c(result,list(dbname))
}
print (dbname)
print (dbname)
print (dbname)
print (dbname)
dbname<-"Unique in protein (yes)"
dbname
print(dbame)
print(dbname)
print(dbname)
print(dbname)
dbname<-'k'
print(dbname)
print(dbname)
if (!is.na(pepmaperdata[i,(5+d)])){
if (as.character(v)=="ProteinVen"){
uid<-substr(as.character(pepmaperdata[i,1]), 1, 6)
dbname<-c(dbname,uid)
} else {
dbname<-c(dbname,as.character(pepmaperdata[i,5]))
}
}
print(pepmaperdata[i,])
print(pepmaperdata[i,0])
print(pepmaperdata[i,1])
print(pepmaperdata[i,6])
print(pepmaperdata[i,7])
x<-NA
x
typeof(x)
if (x==NA){ print("YEs")}
if (!is.na(x)){ print("Yes")}
if (is.na(x)){ print("Yes")}
print(result)
pepmaperdata<-read.csv("ReportBook_mother_file.csv",check.names=F,header = T,sep="\t")
result<-list()
uniqprotyes<-c()
uniqprotno<-c()
presisoyes<-c()
presisono<-c()
for(i in 1:nrow(pepmaperdata)){
print(pepmaperdata[i,6])
print(pepmaperdata[i,7])
if (!is.na(pepmaperdata[i,6])){
uniqprotyes<-c(uniqprotyes,as.character(pepmaperdata[i,5]))
} else {
uniqprotno<-c(uniqprotno,as.character(pepmaperdata[i,5]))
}
if (!is.na(pepmaperdata[i,7])){
presisoyes<-c(presisoyes,as.character(pepmaperdata[i,5]))
} else {
presisono<-c(presisono,as.character(pepmaperdata[i,5]))
}
}
pepmaperdata<-read.csv("ReportBook_mother_file.csv",check.names=F,header = T,sep="\t")
result<-list()
uniqprotyes<-c()
uniqprotno<-c()
presisoyes<-c()
presisono<-c()
for(i in 1:nrow(pepmaperdata)){
if (!is.na(pepmaperdata[i,6])){
uniqprotyes<-c(uniqprotyes,as.character(pepmaperdata[i,5]))
} else {
uniqprotno<-c(uniqprotno,as.character(pepmaperdata[i,5]))
}
if (!is.na(pepmaperdata[i,7])){
presisoyes<-c(presisoyes,as.character(pepmaperdata[i,5]))
} else {
presisono<-c(presisono,as.character(pepmaperdata[i,5]))
}
}
result<-c(result,list(uniqprotyes))
result<-c(result,list(uniqprotno))
result<-c(result,list(presisoyes))
result<-c(result,list(presisono))
print(result)
